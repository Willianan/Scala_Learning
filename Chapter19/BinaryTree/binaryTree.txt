二叉树
    1、数组存储方式的分析
        优点：通过下标方式访问元素，速度快，对于有序数组，还可使用二分查找提高检索速度
        缺点：如果要检索具体某个值，或者插入值（按一定顺序）会整体移动，效率较低
    2、链式存储方式的分析
        优点：在一定程度上对数组存储方式有优化（比如：插入一个数值结点，只需要将插入节点链接到链表中即可）
        缺点：在进行检索时，效率仍然较低（比如：检索某个值，需要从头节点开始遍历）
    3、树存储方式的分析
        能提高数据存储、读写的效率(比如：利用二叉排序树(BST))，既可以保证数据的检索速度，同时也可以保证数据的插入、删除、修改的速度
二叉树的遍历
    1、前序遍历：先输出父结点，在遍历左子树和右子树
    2、中序遍历：先遍历左子树，在输出父结点，再遍历右子树
    3、后序遍历：先遍历左子树，再遍历右子树，最后输出父结点
二叉树的查找
    1、前序查找：先比较当前节点，如果不是，就向左子树查找，如果左子树没有，就向右子树查找，找到返回该节点，否则返回null
    2、中序查找：先在左子树查找，再比较当前节点，再在右子树查找
    3、后序查找：先在左子树查找，再在右子树查找，最后再比较当前节点
顺序存储二叉树的概念
    基本说明
        从数据存储来看，数值存储方式和树的存储方式可以互相转换，即数组可以转换成树，树也可以转换成数组。
    顺序存储二叉树的特点
        1、顺序二叉树通常只考虑完全二叉树
        2、第n个元素的左子节点为 2 * n + 1
        3、第n个元素的右子节点为 2 * n + 2
        4、第n个元素的父节点为 (n - 1) / 2
        5、n：表示二叉树中的第几个元素(按0开始编号)
二叉排序树(BST,Binary Sort(Search) Tree)
    对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点的值比当前节点的值大
    特别说明：如果有相同的值，可以将该节点放在左子节点或右子节点

其他二叉树
    1、线索二叉树
    2、赫夫曼二叉树（哈夫曼树，最优二叉树）[编码，解码，数据压缩，解压]
    3、平衡二叉树(平衡二叉搜索树，AVL树)[常用的实现方法：红黑树、替罪羊树、伸展树等]
    4、B树
    5、B+树
    6、2-3树

代理模式（Proxy）
    1、代理模式：为一个对象提供一个替身，以控制对这个对象的访问
    2、被代理的对象可以是远程对象、创建开销大的对象或需要安全控制的对象
    3、代理模式有不同的形式，都是为了控制与管理对象访问
远程代理模式
    1、远程代理：远程对象的本地代表，通过它可以把远程对象当本地对象来调用。
       远程代理通过网络和真正的远程对象沟通信息（RMI[Remote Method Invocation]：将
       socket的底层封装，对外提供调用方法接口）
Java RMI实现远程代理
    RMI指的是远程方法调用(Remote Method Invocation)。它是一种机制，能够让某个Java虚拟机
    上的对象调用另一个Java虚拟机中的对象上的方法。可以用此方法调用任何对象必须实现该远程
    接口，RMI可以将底层的socket编程封装，简化操作。
Java RMI的介绍
    1、RMI远程方法调用时计算机之间通过网络实现对象调用的一种通信机制
    2、使用RMI机制，一台计算机上的对象可以调用另外一台计算机上的对象来获取远程数据
    3、RMI被设计成一种面向对象开发方式，允许程序员是恶意远程对象来实现通信。

动态代理
    运行时动态的创建代理类(对象)，并将方法调用转发到指定类(对象)
    1、Proxy和InvocationHandler组合充当代理的角色
    2、RealSubject是一个实际对象，它实现接口Subject
    3、在使用时，不希望直接访问RealSubject对象
    4、使用动态代理，在程序中通过动态代理创建RealSubject，并完成调用
    5、动态代理可以根据需要，创建多种组合
    6、Proxy也会实现Subject接口的方法，因此，使用Proxy+Invocation可以完成对RealSubject的动态调用
    7、通过Proxy调用RealSubject方法是否成功，是由InvocationHandler来控制的(其实就是保护代理)
    8、创建一个代理对象替代被调用的真实对象，使用反射实现控制

几种常见的代理模式介绍---几种变体
    1、防火墙代理：内网通过代理穿透防火墙，实现对公网的访问
    2、缓存代理
    3、静态代理：静态代理通常用于对原有业务逻辑的扩充
    4、cglib代理：使用cglib(Code Generation Library)实现动态代理，并不要求委托类必须实现接口，底层采用ASM字节码
       生成框架生成代理类的字节码
    5、同步代理：主要使用在多线程编程中，完成多线程间同步工作
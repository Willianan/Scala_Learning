学习设计模式的必要性
    1、看源码，一些框架大量使用设计模式
    2、设计模式能让专业人之间交流更方便
    3、提高代码的易维护
    4、设计模式是编程经验的总结，即通用的编程应用场景的模式化，套路化（软件设计层面考虑）
掌握设计模式的层次
    1、第1层，刚开始学编程不久，听说过什么是设计模式
    2、第2层，有很长时间的编程经验，自己写了很多代码，其中用到了设计模式，但是自己不知道
    3、第3层，学习过了设计模式，发现自己已经在使用了，并且发现了一些新的模式挺好用的
    4、第4层，阅读了很多别人写的源码和框架，在其中看到别人设计模式，并且能够领会设计模式的精妙和带来的好处
    5、第5层，代码写着写着，自己都没有意识到使用了设计模式，并且熟练的写了出来
设计模式介绍
    1、设计模式是程序员在面对同类软件工程设计问题所总结出来的有用的经验，模式部署代码，而是某类问题的通用
       解决方案，设计模式（Design pattern）代表了最佳的实践。这些解决方案是众多软件开发人员经过相当长的一段
       时间的试验和错误总结出来的
    2、设计模式的本质：提高软件的可维护性，通用性和扩展性，并降低软件的复杂度
    3、《设计模式》是经典的书，作者：Erich Gamma、Richard Helm、Ralph Johnson和John Vlissides Design
    4、设计模式并不局限于某种语言
设计模式类型（23种）
    1、创建型模式：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式
    2、结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式
    3、行为型模式：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式（Interpreter模式）、
       状态模式、策略模式、职责链模式（责任链模式）、访问者模式
工厂模式小结
    1、工厂模式的意义：将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主
        项目的依赖关系的解耦。从而提高项目的扩展和维护性
    2、三种工厂模式
    3、设计模式的依赖抽象原则
        （1）创建对象实例时，不要直接new类，而是把这个new类的动作放在一个工厂的方法中，
             并返回。（变量不要直接持有具体类的引用）
        （2）不要让类继承具体类，而是继承抽象类或trait（接口）
        （3）不要覆盖基类中已经实现的方法